The project uses the free Skills Network-provided 
OpenAI APIs, along with Node.js and the Express.js framework.


Run node server.js  ------------------------------------------
After run "node server.js" command on terminal----
With Skills Network-provided 
OpenAI APIs key run below url on browser:
https://prajaktak137-3000.theianext-0-labs-prod-misc-tools-us-east-0.proxy.cognitiveclass.ai/

----------------------------------------------------------------------------------------------
With your own OpenAI API key: 
To Run server: node server.js (terminal)
port: 3000 
http://localhost:3000/  (browser)
http://localhost:3000/api
http://localhost:3000/chat
http://localhost:3000/api



ðŸš€ Options you have set API key or Without API demo response

1. Use your own key (recommended if you want it to work locally and deploy later).

Get it here: https://platform.openai.com/api-keys

Put it in config.js or .env.

2. Run without OpenAI (demo mode)
If you just want to test the app flow (without real AI), you can make openai.js return a dummy response instead of calling the API:

class OpenAIAPI {
    static async generateResponse(userMessage) {
        return `Echo: ${userMessage}`;  // just repeat the input
    }
}
module.exports = { OpenAIAPI };

-----------------------------------------------------------------------

Steps for project: 

mkdir software-dev-chatbot
cd software-dev-chatbot
npm init -y

npm install express openai

mkdir public
touch index.html and other files 

node server.js

-----------------------------------
Note: In case you want to use your own API Key instead of the lab enviornmentâ€™s free access then you need to make a few changes to the configuration and openai.js file. Also, to. run the code outside of Skills network labs you will need to add your own API key.
Click here to see the configuration changes:
â€¢ Create a file named config.js within the project directory.

To prioritize security, it is recommended to store your API key in this separate config.js file.

â€¢ Subsequently, replace YOUR_API_KEY in the provided code with your specific API key.

config.js file:

module.exports = {
    OpenAIAPIKey: 'YOUR_API_KEY'
};

------------------------

openai.js file:

const { OpenAIAPIKey } = require('./config'); // Create config.js with your API key
class OpenAIAPI {
    static async generateResponse(userMessage) {
        const apiKey = OpenAIAPIKey;
        const endpoint = 'https://api.openai.com/v1/engines/gpt-3.5-turbo/completions';
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`,
            },
            body: JSON.stringify({
                prompt: userMessage,
                max_tokens: 150,
            }),
        });
        const responseData = await response.json();
        // Log the entire API response for debugging
        console.log('Response from OpenAI API:', responseData);
        // Check if choices array is defined and not empty
        if (responseData.choices && responseData.choices.length > 0) {
            return responseData.choices[0].text.trim();
        } else {
            // Handle the case where choices array is undefined or empty
            console.error('Error: No valid response from OpenAI API');
            return 'Sorry, I couldn\'t understand that.';
        }
    }
}
module.exports = { OpenAIAPI };

